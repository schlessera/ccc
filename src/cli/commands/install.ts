import * as p from '@clack/prompts';
import chalk from 'chalk';
import * as fs from 'fs-extra';
import * as path from 'path';
import * as os from 'os';
import { PathUtils } from '../../utils/paths';

interface InstallOptions {
  prefix?: string;
}

export async function installCommand(options: InstallOptions): Promise<void> {
  try {
    p.intro(chalk.cyan('üì¶ Install Global Commands'));

    const installPath = options.prefix || path.join(os.homedir(), '.local', 'bin');
    const sourcePath = process.argv[1]; // Path to the current CCC executable
    
    // Ensure install directory exists
    await fs.ensureDir(installPath);

    // Check if already installed
    const globalCccPath = path.join(installPath, 'ccc');
    const isInstalled = await PathUtils.exists(globalCccPath);

    if (isInstalled) {
      const reinstall = await p.confirm({
        message: `CCC is already installed at ${globalCccPath}. Reinstall?`,
        initialValue: false
      });

      if (!reinstall || p.isCancel(reinstall)) {
        p.outro('Installation cancelled');
        return;
      }
    }

    const spinner = p.spinner();
    
    try {
      spinner.start('Installing global CCC command');

      // Create a wrapper script that points to the current CCC installation
      const wrapperScript = createWrapperScript(sourcePath);
      
      await fs.writeFile(globalCccPath, wrapperScript);
      await fs.chmod(globalCccPath, 0o755);

      spinner.stop('Installation completed');

      // Check if install path is in PATH
      const pathEnv = process.env.PATH || '';
      const pathIncludes = pathEnv.split(path.delimiter).includes(installPath);

      const lines = [
        `Installed: ${chalk.green(globalCccPath)}`,
        `Source: ${chalk.gray(sourcePath)}`
      ];

      if (!pathIncludes) {
        lines.push('');
        lines.push(`${chalk.yellow('‚ö†Ô∏è  Path not in $PATH')}`);
        lines.push(`Add to your shell profile:`);
        lines.push(`  ${chalk.gray(`export PATH="${installPath}:$PATH"`)}`);
      }

      p.note(lines.join('\n'), chalk.green('‚úÖ Installation Complete'));

      // Show verification steps
      const nextSteps = [
        pathIncludes ? 'You can now run "ccc" from anywhere' : 'Restart your terminal or source your shell profile',
        'Try running "ccc --help" to verify installation',
        'Use "ccc setup" to manage your first project'
      ];

      p.note(nextSteps.join('\n'), 'üí° Next Steps');

    } catch (error: any) {
      spinner.stop('Installation failed');
      throw error;
    }

  } catch (error: any) {
    p.cancel(chalk.red(error.message));
    process.exit(1);
  }
}

function createWrapperScript(sourcePath: string): string {
  return `#!/usr/bin/env bash

# CCC Global Wrapper Script
# Generated by CCC install command

# Get the directory where this script is located
SCRIPT_DIR="$( cd "$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"

# Source CCC path (where CCC was installed from)
CCC_SOURCE="${sourcePath}"

# Check if source exists
if [ ! -f "$CCC_SOURCE" ]; then
    echo "‚ùå CCC source not found: $CCC_SOURCE"
    echo "Please reinstall CCC or run 'ccc install' again"
    exit 1
fi

# Execute the source CCC with all arguments
exec "$CCC_SOURCE" "$@"
`;
}